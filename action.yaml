name: App type
description: Get App Type
inputs:
  secrets:
    description: Input secrets
    required: false
outputs:
  access_token:
    description: 'app type output access_token'
    value: ${{ steps.app_env.outputs.access_token }}
  actions_step_debug:
    description: 'app type output actions_step_debug'
    value: ${{ steps.app_env.outputs.actions_step_debug }}
  argocd_passward:
    description: 'app type output argocd_passward'
    value: ${{ steps.app_env.outputs.argocd_passward }}
  gcp_project:
    description: 'app type output gcp_project'
    value: ${{ steps.app_env.outputs.gcp_project }}
  gcp_region:
    description: 'app type output gcp_region'
    value: ${{ steps.app_env.outputs.gcp_region }}
  gcp_sa:
    description: 'app type output gcp_sa'
    value: ${{ steps.app_env.outputs.gcp_sa }}
  gcp_wip:
    description: 'app type output gcp_wip'
    value: ${{ steps.app_env.outputs.gcp_wip }}
  name:
    description: 'app type output name'
    value: ${{ steps.app_env.outputs.name }}
  private_key:
    description: 'app type output private_key'
    value: ${{ steps.app_env.outputs.private_key }}
  public_key:
    description: 'app type output public_key'
    value: ${{ steps.app_env.outputs.public_key }}
runs:
  using: "composite"
  steps:
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch

    - name: decode json
      shell: bash
      id: set_var
      run: |
      content="${{inputs.secrets}}"
      content="${content//'%'/'%25'}"
      content="${content//$'\n'/'%0A'}"
      content="${content//$'\r'/'%0D'}"
      echo "::set-output name=secrets::$content"

    - name: check app type
      id: app_env
      shell: bash
      run: |
        if [[ "${{ steps.extract_branch.outputs.branch }}" == "alpha" ]]; then
          access_token="${{ fromJson(steps.set_var.outputs.secrets).ACCESS_TOKEN }}"
          echo "ACCESS_TOKEN=${access_token}" >> $GITHUB_ENV
          echo "::set-output name=access_token::$(echo $access_token)"

          actions_step_debug="${{ fromJson(steps.set_var.outputs.secrets).ACTIONS_STEP_DEBUG }}"
          echo "ACTIONS_STEP_DEBUG=${actions_step_debug}" >> $GITHUB_ENV
          echo "::set-output name=actions_step_debug::$(echo $actions_step_debug)"

          argocd_passward="${{ fromJson(steps.set_var.outputs.secrets).ARGOCD_PASSWARD }}"
          echo "ARGOCD_PASSWARD=${argocd_passward}" >> $GITHUB_ENV
          echo "::set-output name=argocd_passward::$(echo $argocd_passward)"

          gcp_project="${{ fromJson(steps.set_var.outputs.secrets).GCP_PROJECT_DEV }}"
          echo "GCP_PROJECT=${gcp_project}" >> $GITHUB_ENV
          echo "::set-output name=gcp_project::$(echo $gcp_project)"

          gcp_region="${{ fromJson(steps.set_var.outputs.secrets).GCP_REGION_DEV }}"
          echo "GCP_REGION=${gcp_region}" >> $GITHUB_ENV
          echo "::set-output name=gcp_region::$(echo $gcp_region)"

          gcp_sa="${{ fromJson(steps.set_var.outputs.secrets).GCP_SA_DEV }}"
          echo "GCP_SA=${gcp_sa}" >> $GITHUB_ENV
          echo "::set-output name=gcp_sa::$(echo $gcp_sa)"

          gcp_wip="${{ fromJson(steps.set_var.outputs.secrets).GCP_WIP_DEV }}"
          echo "GCP_WIP=${gcp_wip}" >> $GITHUB_ENV
          echo "::set-output name=gcp_wip::$(echo $gcp_wip)"

          name="${{ fromJson(steps.set_var.outputs.secrets).NAME_DEV }}"
          echo "NAME=${name}" >> $GITHUB_ENV
          echo "::set-output name=name::$(echo $name)"

          private_key="${{ fromJson(steps.set_var.outputs.secrets).PRIVATE_KEY }}"
          echo "PRIVATE_KEY=${private_key}" >> $GITHUB_ENV
          echo "::set-output name=private_key::$(echo $private_key)"

          public_key="${{ fromJson(steps.set_var.outputs.secrets).PUBLIC_KEY }}"
          echo "PUBLIC_KEY=${public_key}" >> $GITHUB_ENV
          echo "::set-output name=public_key::$(echo $public_key)"
        fi
