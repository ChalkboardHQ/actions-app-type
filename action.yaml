name: App type
description: Get App Type
inputs:
  secrets:
    description: Input secrets
    required: false
outputs:
  git_branch:
    description: 'app type output git_branch'
    value: ${{ steps.app_env.outputs.git_branch }}
  gcp_project:
    description: 'app type output gcp_project'
    value: ${{ steps.app_env.outputs.gcp_project }}
  gcp_region:
    description: 'app type output gcp_region'
    value: ${{ steps.app_env.outputs.gcp_region }}
  gcp_sa:
    description: 'app type output gcp_sa'
    value: ${{ steps.app_env.outputs.gcp_sa }}
  gcp_wip:
    description: 'app type output gcp_wip'
    value: ${{ steps.app_env.outputs.gcp_wip }}
  name:
    description: 'app type output name'
    value: ${{ steps.app_env.outputs.name }}
runs:
  using: "composite"
  steps:
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch

    - name: check app type
      id: app_env
      shell: bash
      run: |
        if [[ "${{ steps.extract_branch.outputs.branch }}" == "alpha" ]]; then
          git_branch="${{ steps.extract_branch.outputs.branch }}"
          echo "GIT_BRANCH=${git_branch}" >> $GITHUB_ENV
          echo "::set-output name=git_branch::$(echo $git_branch)"
        
          gcp_project="${{ fromJson(inputs.secrets).GCP_PROJECT_DEV }}"
          echo "GCP_PROJECT=${gcp_project}" >> $GITHUB_ENV
          echo "::set-output name=gcp_project::$(echo $gcp_project)"

          gcp_region="${{ fromJson(inputs.secrets).GCP_REGION_DEV }}"
          echo "GCP_REGION=${gcp_region}" >> $GITHUB_ENV
          echo "::set-output name=gcp_region::$(echo $gcp_region)"

          gcp_sa="${{ fromJson(inputs.secrets).GCP_SA_DEV }}"
          echo "GCP_SA=${gcp_sa}" >> $GITHUB_ENV
          echo "::set-output name=gcp_sa::$(echo $gcp_sa)"

          gcp_wip="${{ fromJson(inputs.secrets).GCP_WIP_DEV }}"
          echo "GCP_WIP=${gcp_wip}" >> $GITHUB_ENV
          echo "::set-output name=gcp_wip::$(echo $gcp_wip)"

          name="${{ fromJson(inputs.secrets).NAME_DEV }}"
          echo "NAME=${name}" >> $GITHUB_ENV
          echo "::set-output name=name::$(echo $name)"
        fi
